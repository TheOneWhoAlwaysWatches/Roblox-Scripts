-- Adaptive Token-Bucket Insta-Kill Loop (drop-in replacement)

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- CONFIG (tweak these)
local auraSize = Vector3.new(40, 40, 40)
local DOUBLE_STRIKE = true            -- keep redundancy
local MAX_TOKENS = 40                 -- max burst capacity
local REFILL_PER_SEC = 40             -- base ops per second
local LAG_FRAME_THRESHOLD = 0.050     -- if heartbeat delta > this, consider "laggy"
local LAG_ADJUSTMENT_FACTOR = 0.5     -- reduce refill rate by this factor when laggy
local TOUCHS_PER_TARGET = 1           -- touches per target per op (1 keeps load low)
local PREDICT_AHEAD = 0               -- optional: offset for prediction in studs (0 default)

-- STATE
local tokens = MAX_TOKENS
local lastTick = tick()
local running = false
local myChar, myHRP

-- smoothing for frame delta to detect sustained lag (exponential moving average)
local emaDelta = 1/60
local EMA_ALPHA = 0.1

local function refreshSelf()
    myChar = LocalPlayer.Character
    myHRP = myChar and myChar:FindFirstChild("HumanoidRootPart")
end

local function getTouchPart(tool)
    local tt = tool and tool:FindFirstChildWhichIsA("TouchTransmitter", true)
    return tt and tt.Parent
end

local function strikeToolRemote(tool)
    -- fire remote if exists (1 token per remote fire)
    local fightEvent = tool:FindFirstChild("FightEvent")
    if fightEvent then
        pcall(function()
            fightEvent:FireServer()
            if DOUBLE_STRIKE then
                -- small immediate repeat, but still counts as second token
                fightEvent:FireServer()
            end
        end)
        return (DOUBLE_STRIKE and 2) or 1
    end
    return 0
end

local function touchTargetOnce(touchPart, part)
    -- minimal touch spam: just one open/close
    firetouchinterest(touchPart, part, 1)
    firetouchinterest(touchPart, part, 0)
end

-- main heartbeat-driven loop with adaptive token bucket
local heartbeatConn
local function startAdaptiveLoop()
    if heartbeatConn then heartbeatConn:Disconnect() end
    running = true
    lastTick = tick()
    tokens = MAX_TOKENS
    emaDelta = 1/60

    heartbeatConn = RunService.Heartbeat:Connect(function(dt)
        if not running then return end

        -- update EMA for dt and detect lag
        emaDelta = emaDelta + (dt - emaDelta) * EMA_ALPHA
        local isLaggy = emaDelta > LAG_FRAME_THRESHOLD

        -- compute effective refill rate (reduced if laggy)
        local effectiveRefill = REFILL_PER_SEC * (isLaggy and LAG_ADJUSTMENT_FACTOR or 1)

        -- refill tokens smoothly
        tokens = math.min(MAX_TOKENS, tokens + effectiveRefill * dt)

        -- refresh self references
        refreshSelf()
        if not myChar or not myHRP then return end

        -- collect candidate tools & targets (do light work first)
        local toolList = {}
        for _, tool in ipairs(myChar:GetChildren()) do
            if tool:IsA("Tool") then
                table.insert(toolList, tool)
            end
        end
        if #toolList == 0 then return end

        -- iterate tools, do actions while tokens available
        for _, tool in ipairs(toolList) do
            if tokens < 1 then break end

            -- remote strikes (count tokens consumed)
            local remoteCost = strikeToolRemote(tool)
            if remoteCost > 0 then
                tokens = tokens - math.min(tokens, remoteCost)
            end

            -- if tokens remain, perform touch-based attempts
            local touchPart = getTouchPart(tool)
            if touchPart and tokens >= 1 then
                -- compute expanded box once
                local boxSize = touchPart.Size + auraSize
                local boxCFrame = touchPart.CFrame
                -- optional prediction: offset the box forward in movement dir
                if PREDICT_AHEAD ~= 0 and myHRP.Velocity.Magnitude > 1 then
                    local dir = myHRP.Velocity.Unit
                    boxCFrame = boxCFrame + dir * PREDICT_AHEAD
                end

                -- get parts once
                local parts = Workspace:GetPartBoundsInBox(boxCFrame, boxSize)
                for _, part in ipairs(parts) do
                    if tokens < 1 then break end
                    if not myChar:IsAncestorOf(part) then
                        local model = part:FindFirstAncestorWhichIsA("Model")
                        if model then
                            -- one touch per target per frame
                            touchTargetOnce(touchPart, part)
                            tokens = tokens - 1
                        end
                    end
                end
            end
        end
    end)
end

-- stop function
local function stopLoop()
    running = false
    if heartbeatConn then
        heartbeatConn:Disconnect()
        heartbeatConn = nil
    end
end

-- hook character events similar to your previous code
LocalPlayer.CharacterAdded:Connect(function(char)
    stopLoop()
    task.wait(0.05)
    local hum = char:WaitForChild("Humanoid", 5)
    if hum then
        hum.Died:Connect(function() stopLoop() end)
    end
    startAdaptiveLoop()
end)

-- start if already present
if LocalPlayer.Character then
    startAdaptiveLoop()
end
